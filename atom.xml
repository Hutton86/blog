<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.冰凉</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-20T17:21:02.250Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.冰凉</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义Spring boot starter</title>
    <link href="http://yoursite.com/2020/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89Spring-boot-starter/"/>
    <id>http://yoursite.com/2020/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89Spring-boot-starter/</id>
    <published>2020-07-20T15:19:42.000Z</published>
    <updated>2020-07-20T17:21:02.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="starter的作用"><a href="#starter的作用" class="headerlink" title="starter的作用"></a>starter的作用</h2><ol><li><p>管理依赖</p></li><li><p>已<code>约定大于配置</code>的方式进行默认配置</p></li></ol><p><img src="starter-top.png" srcset="/img/loading.gif" alt=""></p><h2 id="自定义starter的主要步骤"><a href="#自定义starter的主要步骤" class="headerlink" title="自定义starter的主要步骤"></a>自定义starter的主要步骤</h2><h3 id="1-创建starter工程"><a href="#1-创建starter工程" class="headerlink" title="1.创建starter工程"></a>1.创建starter工程</h3><p>starter的命名规则</p><pre><code class="hljs properties"><span class="hljs-meta">官方命名格式为：</span> <span class="hljs-string">spring-boot-starter-&#123;name&#125;</span><span class="hljs-attr">非官方建议命名格式：&#123;name&#125;-spring-boot-starter</span></code></pre><h3 id="2-pom-xml文件中添加springboot依赖"><a href="#2-pom-xml文件中添加springboot依赖" class="headerlink" title="2.pom.xml文件中添加springboot依赖"></a>2.<code>pom.xml</code>文件中添加springboot依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="3-编写properties配置类"><a href="#3-编写properties配置类" class="headerlink" title="3.编写properties配置类"></a>3.编写properties配置类</h3><p>创建{name}Properties.java类文件，使用注解<code>@ConfigurationProperties</code>标注的javaben。springboot可在工程启动时将<code>properties</code>或<code>yml</code>文件中已<code>prefix</code>开头的配置参数设置到类实例中。例如下类，application.properties文件中的<code>XXX.para1</code>值赋给XXXProperties实例的para1属性。</p><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">'XXX'</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XXXProperties</span> </span>&#123;<span class="hljs-keyword">private</span> String para1; <span class="hljs-comment">// some-paras</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPara1</span><span class="hljs-params">(String para1)</span></span>&#123;<span class="hljs-keyword">this</span>.para1 = para1;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPara1</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.para1;&#125;&#125;</code></pre><p>application.properties文件内容</p><pre><code class="hljs properties"><span class="hljs-meta">XXX.para1</span>=<span class="hljs-string">some-paras</span></code></pre><p>可以通过构造函数参数、@Autowired注解等方式将XXXProperties对象传递给需要的实例，从而获取配置文件中的参数。</p><p>目前为止，配置类还不能被加载和赋值，需要在AutoConfiguration中开启。</p><h3 id="4-编写AutoConfiguration"><a href="#4-编写AutoConfiguration" class="headerlink" title="4.编写AutoConfiguration"></a>4.编写AutoConfiguration</h3><p>创建{name}AutoConfiguration类文件，使用注解<code>@EnableConfigurationProperties({ XXXProperties.class })</code>标注。这样XXXProperties才能在AutoConfiguration初始化时被连带加载初始化。</p><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties</span>(&#123; XXXProperties<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;)</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">XXX1Autoconfiguration</span></span>&#123;<span class="hljs-comment">// 其它配置</span>&#125;</code></pre><p>spring不会自动扫描jar包中的类文件，所以我们需要在META-INF/spring.factories中指定<code>EnableAutoConfiguration</code>需要实例化的类，告诉spring扫描该类。</p><pre><code class="hljs properties"><span class="hljs-meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span>com.xxx.XXX1AutoConfiguration,\com.xxx.XXX2AutoConfiguration,\</code></pre><p>只有@Configuration标识过的类才会自动加载，并且还需要一些限定条件(@ConditionalOn…)才能根据配置和环境的差别做出差异化的初始化。</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnProperty</span>(name = <span class="hljs-string">"xxx.xxx.enabled"</span>)<span class="hljs-meta">@EnableConfigurationProperties</span>(&#123; XXXProperties<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;)</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">XXX1Autoconfiguration</span></span>&#123;<span class="hljs-comment">// 其它配置</span>&#125;</code></pre><p>@Configuration //TODO 相关配置</p><h2 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h2><p>如何让IDE提示参数？ 配置元数据 // TODO</p><h2 id="starer涉及的一些重要概念"><a href="#starer涉及的一些重要概念" class="headerlink" title="starer涉及的一些重要概念"></a>starer涉及的一些重要概念</h2><p>1.spring factories</p><p>2.@Configuration —&gt; @ConditinalOnxxxxx 、@Bean 、@Import 、 @Profile</p><p>jar包中@configuration标注的类会被自动加载吗？</p><p>3.配置文件的优先级顺序</p><p>4.配置元数据</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.0.0.M5/reference/htmlsingle/#boot-features-developing-auto-configuration" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.0.M5/reference/htmlsingle/#boot-features-developing-auto-configuration</a></p><p><a href="https://blog.csdn.net/L_Sail/article/details/70342023" target="_blank" rel="noopener">https://blog.csdn.net/L_Sail/article/details/70342023</a> 配置元数据</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor</a> 配置元数据</p><p><a href="https://cloud.tencent.com/developer/article/1432121" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1432121</a> additional-spring-configuration-metadata.json与自动生成的元数据区别</p><p><a href="https://blog.csdn.net/gwd1154978352/article/details/89248273" target="_blank" rel="noopener">https://blog.csdn.net/gwd1154978352/article/details/89248273</a> spring factories</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;starter的作用&quot;&gt;&lt;a href=&quot;#starter的作用&quot; class=&quot;headerlink&quot; title=&quot;starter的作用&quot;&gt;&lt;/a&gt;starter的作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;管理依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;已&lt;code&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/07/20/hello-world/"/>
    <id>http://yoursite.com/2020/07/20/hello-world/</id>
    <published>2020-07-20T15:13:10.515Z</published>
    <updated>2020-07-20T15:13:10.515Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
